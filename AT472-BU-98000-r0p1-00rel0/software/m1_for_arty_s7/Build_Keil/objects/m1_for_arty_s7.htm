<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objects\m1_for_arty_s7.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objects\m1_for_arty_s7.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Aug 13 15:14:14 2019
<BR><P>
<H3>Maximum Stack Usage =        536 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; NAV_GetData &rArr; NAV_ReadAccelG &rArr; NAV_ReadAccel &rArr; NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">NMI_Handler</a><BR>
 <LI><a href="#[11]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">HardFault_Handler</a><BR>
 <LI><a href="#[12]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SVC_Handler</a><BR>
 <LI><a href="#[13]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">PendSV_Handler</a><BR>
 <LI><a href="#[1f]">Unused_IRQ10</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">Unused_IRQ10</a><BR>
 <LI><a href="#[62]">XUartLite_SendByte</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[62]">XUartLite_SendByte</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">DAPLinkFittedn</a> from main.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[19]">DAP_QSPI0_Handler</a> from spi.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[1b]">DAP_QSPI_XIP_Handler</a> from spi.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[1a]">DAP_SPI0_Handler</a> from spi.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[16]">GPIO0_Handler</a> from gpio.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[17]">GPIO1_Handler</a> from gpio.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[18]">QSPI0_Handler</a> from spi.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[38]">RecvHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[41]">Reset_Handler</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[37]">SendHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[3a]">StubHandler</a> from xuartlite.o(.text) referenced from xuartlite.o(.text)
 <LI><a href="#[39]">StubStatusHandler</a> from xspi.o(.text) referenced from xspi.o(.text)
 <LI><a href="#[14]">SysTick_Handler</a> from main.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_arty_cm1.o(.text) referenced from startup_arty_cm1.o(.text)
 <LI><a href="#[15]">UART0_Handler</a> from uart.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[1f]">Unused_IRQ10</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[20]">Unused_IRQ11</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[21]">Unused_IRQ12</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[22]">Unused_IRQ13</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[23]">Unused_IRQ14</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[24]">Unused_IRQ15</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[25]">Unused_IRQ16</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[26]">Unused_IRQ17</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[27]">Unused_IRQ18</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[28]">Unused_IRQ19</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[29]">Unused_IRQ20</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[2a]">Unused_IRQ21</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[2b]">Unused_IRQ22</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[2c]">Unused_IRQ23</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[2d]">Unused_IRQ24</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[2e]">Unused_IRQ25</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[2f]">Unused_IRQ26</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[30]">Unused_IRQ27</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[31]">Unused_IRQ28</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[32]">Unused_IRQ29</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[33]">Unused_IRQ30</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[34]">Unused_IRQ31</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[1d]">Unused_IRQ8</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[1e]">Unused_IRQ9</a> from startup_arty_cm1.o(.text) referenced from startup_arty_cm1.o(RESET)
 <LI><a href="#[3b]">XIic_StubHandler</a> from xiic.o(.text) referenced from xiic.o(.text)
 <LI><a href="#[3c]">XIic_StubStatusHandler</a> from xiic.o(.text) referenced from xiic.o(.text)
 <LI><a href="#[3d]">XTmrCtr_StubCallback</a> from xtmrctr.o(.text) referenced from xtmrctr.o(.text)
 <LI><a href="#[42]">__main</a> from __main.o(!!!main) referenced from startup_arty_cm1.o(.text)
 <LI><a href="#[40]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[3f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[3e]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[44]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[46]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[162]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[163]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[164]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[12c]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[47]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[48]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[4a]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[4c]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[4e]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[59]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[165]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[50]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[166]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[167]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[52]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[168]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[169]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[54]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[16d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[170]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[171]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[172]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[173]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[174]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[175]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[176]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[177]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[178]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[179]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[5e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[17a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[17b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[17c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[17d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[17e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[17f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[180]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[45]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[181]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[56]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[58]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[182]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[5a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; NAV_GetData &rArr; NAV_ReadAccelG &rArr; NAV_ReadAccel &rArr; NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[183]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[15a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[184]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[41]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))

<P><STRONG><a name="[186]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Unused_IRQ10</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unused_IRQ10
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unused_IRQ10
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Unused_IRQ11</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Unused_IRQ12</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Unused_IRQ13</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Unused_IRQ14</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Unused_IRQ15</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Unused_IRQ16</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Unused_IRQ17</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Unused_IRQ18</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Unused_IRQ19</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Unused_IRQ20</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>Unused_IRQ21</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>Unused_IRQ22</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>Unused_IRQ23</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>Unused_IRQ24</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>Unused_IRQ25</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>Unused_IRQ26</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Unused_IRQ27</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>Unused_IRQ28</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>Unused_IRQ29</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>Unused_IRQ30</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>Unused_IRQ31</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Unused_IRQ8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Unused_IRQ9</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_arty_cm1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[187]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_arty_cm1.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_arty_cm1.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>outbyte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, outbyte.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[63]"></a>print</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = print &rArr; outbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIData
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>Xil_Assert</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xil_assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_GetStats
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_DisableInterrupt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ClearStats
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_IsSending
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ResetFifos
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StubHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_GetOptions
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetOptions
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_InterruptHandler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetStatusHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_GetSlaveSelect
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StubStatusHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGetEnabled
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptDisable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalDisable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_GetDataDirection
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_CfgInitialize
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetSendHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetRecvHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_EnableInterrupt
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalEnable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_PwmDisable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_PwmEnable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_PwmConfigure
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_IsExpired
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_GetCaptureValue
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_StubCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_GetStats
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_ClearStats
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_SetStatusHandler
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_SetSendHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_SetRecvHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_IsSlave
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_GetGpOutput
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_SetGpOutput
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_GetAddress
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_SetAddress
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Reset
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_StubHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_StubStatusHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Stop
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Start
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_SetResetValue
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Reset
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Initialize
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_InitHw
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_GetValue
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_CfgInitialize
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Stop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Start
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_CfgInitialize
</UL>

<P><STRONG><a name="[188]"></a>Xil_AssertSetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xil_assert.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>XNullHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, xil_assert.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>main</STRONG> (Thumb, 580 bytes, Stack size 352 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = main &rArr; NAV_GetData &rArr; NAV_ReadAccelG &rArr; NAV_ReadAccel &rArr; NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteQSPIBaseFlash
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQSPIBaseFlash
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_begin
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetData
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQSPIBaseFlash
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getTemperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getHumidity
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_begin
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUARTInterrupts
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableSPIInterrupts
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1c]"></a>DAPLinkFittedn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>InitialiseGPIO</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = InitialiseGPIO &rArr; XGpio_Initialize &rArr; XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>EnableGPIOInterrupts</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnableGPIOInterrupts &rArr; XGpio_InterruptGlobalEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptGlobalEnable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16]"></a>GPIO0_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO0_Handler &rArr; XGpio_InterruptClear &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GPIO1_Handler</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GPIO1_Handler &rArr; XGpio_InterruptClear &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_InterruptClear
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SetDAPLinkQSPIMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>

<P><STRONG><a name="[7f]"></a>IncLeds</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
</UL>

<P><STRONG><a name="[69]"></a>InitialiseSPI</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InitialiseSPI &rArr; XSpi_Initialize &rArr; XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>DisableSPIInterrupts</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>InitQSPIBaseFlash</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitQSPIBaseFlash &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>WriteQSPIBaseFlash</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = WriteQSPIBaseFlash &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>ReadQSPIBaseFlash</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReadQSPIBaseFlash &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>WriteSPIData</STRONG> (Thumb, 124 bytes, Stack size 88 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[18]"></a>QSPI0_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QSPI0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DAP_QSPI0_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAP_QSPI0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DAP_SPI0_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAP_SPI0_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DAP_QSPI_XIP_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAP_QSPI_XIP_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RecvHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>SendHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>InitialiseUART</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitialiseUART &rArr; XUartLite_Initialize &rArr; XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetSendHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetRecvHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>CheckUARTRxBytes</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>EnableUARTInterrupts</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnableUARTInterrupts &rArr; XUartLite_EnableInterrupt &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15]"></a>UART0_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART0_Handler &rArr; XUartLite_InterruptHandler &rArr; ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm1.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>XGpio_CfgInitialize</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
</UL>

<P><STRONG><a name="[78]"></a>XGpio_SetDataDirection</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_SetDataDirection &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
</UL>

<P><STRONG><a name="[8f]"></a>XGpio_GetDataDirection</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, xgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[7c]"></a>XGpio_DiscreteRead</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_DiscreteRead &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncLeds
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[79]"></a>XGpio_DiscreteWrite</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncLeds
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDAPLinkQSPIMode
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
</UL>

<P><STRONG><a name="[7b]"></a>XGpio_InterruptGlobalEnable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_InterruptGlobalEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
</UL>

<P><STRONG><a name="[90]"></a>XGpio_InterruptGlobalDisable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[7a]"></a>XGpio_InterruptEnable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_InterruptEnable &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableGPIOInterrupts
</UL>

<P><STRONG><a name="[91]"></a>XGpio_InterruptDisable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[7d]"></a>XGpio_InterruptClear</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, xgpio_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_InterruptClear &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[92]"></a>XGpio_InterruptGetEnabled</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[93]"></a>XGpio_InterruptGetStatus</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xgpio_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[94]"></a>XGpio_LookupConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, xgpio_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XGpio_LookupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
</UL>

<P><STRONG><a name="[77]"></a>XGpio_Initialize</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, xgpio_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XGpio_Initialize &rArr; XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_LookupConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_CfgInitialize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
</UL>

<P><STRONG><a name="[95]"></a>XSpi_Abort</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, xspi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_InterruptHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
</UL>

<P><STRONG><a name="[81]"></a>XSpi_Reset</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XSpi_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Abort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
</UL>

<P><STRONG><a name="[96]"></a>XSpi_CfgInitialize</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Reset
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SPIInit
</UL>

<P><STRONG><a name="[82]"></a>XSpi_Start</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XSpi_Start &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SPIInit
</UL>

<P><STRONG><a name="[97]"></a>XSpi_Stop</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[84]"></a>XSpi_Transfer</STRONG> (Thumb, 558 bytes, Stack size 24 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteQSPIBaseFlash
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadQSPIBaseFlash
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitQSPIBaseFlash
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteRegister
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadSPI
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>

<P><STRONG><a name="[83]"></a>XSpi_SetSlaveSelect</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XSpi_SetSlaveSelect &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteRegister
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadSPI
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SPIInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>

<P><STRONG><a name="[98]"></a>XSpi_GetSlaveSelect</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[99]"></a>XSpi_SetStatusHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[9a]"></a>XSpi_InterruptHandler</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, xspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Abort
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[9b]"></a>XSpi_SetOptions</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, xspi_options.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XSpi_SetOptions &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SPIInit
</UL>

<P><STRONG><a name="[9c]"></a>XSpi_GetOptions</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xspi_options.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[9d]"></a>XSpi_LookupConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, xspi_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XSpi_LookupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Initialize
</UL>

<P><STRONG><a name="[80]"></a>XSpi_Initialize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xspi_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = XSpi_Initialize &rArr; XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_LookupConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseSPI
</UL>

<P><STRONG><a name="[9e]"></a>XUartLite_CfgInitialize</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ClearStats
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
</UL>

<P><STRONG><a name="[a1]"></a>XUartLite_SendBuffer</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = XUartLite_SendBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
</UL>

<P><STRONG><a name="[a0]"></a>XUartLite_Send</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, xuartlite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[a2]"></a>XUartLite_ReceiveBuffer</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XUartLite_ReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveDataHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
</UL>

<P><STRONG><a name="[8a]"></a>XUartLite_Recv</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XUartLite_Recv &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ReceiveBuffer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[a3]"></a>XUartLite_ResetFifos</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, xuartlite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[a4]"></a>XUartLite_IsSending</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, xuartlite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[89]"></a>XUartLite_SetRecvHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_SetRecvHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[88]"></a>XUartLite_SetSendHandler</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_SetSendHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[8c]"></a>XUartLite_InterruptHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XUartLite_InterruptHandler &rArr; ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveDataHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[a7]"></a>XUartLite_DisableInterrupt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xuartlite_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[8b]"></a>XUartLite_EnableInterrupt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_EnableInterrupt &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUARTInterrupts
</UL>

<P><STRONG><a name="[62]"></a>XUartLite_SendByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, xuartlite_l.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>

<P><STRONG><a name="[a8]"></a>XUartLite_RecvByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xuartlite_l.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_RecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_RecvByte
</UL>

<P><STRONG><a name="[a9]"></a>XUartLite_LookupConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, xuartlite_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = XUartLite_LookupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
</UL>

<P><STRONG><a name="[87]"></a>XUartLite_Initialize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xuartlite_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XUartLite_Initialize &rArr; XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_LookupConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[aa]"></a>XUartLite_GetStats</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, xuartlite_stats.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[9f]"></a>XUartLite_ClearStats</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, xuartlite_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
</UL>

<P><STRONG><a name="[ab]"></a>HYGRO_DelayMillis</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pmodhygro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HYGRO_DelayMillis &rArr; XTmrCtr_Stop &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Stop
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Start
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Reset
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_begin
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_ReadIIC
</UL>

<P><STRONG><a name="[b1]"></a>HYGRO_WriteIIC</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, pmodhygro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HYGRO_WriteIIC &rArr; XIic_Send &rArr; SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Stop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_begin
</UL>

<P><STRONG><a name="[b5]"></a>HYGRO_IICInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pmodhygro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HYGRO_IICInit &rArr; XIic_CfgInitialize &rArr; XIic_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Start
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_CfgInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_begin
</UL>

<P><STRONG><a name="[b7]"></a>HYGRO_TimerInit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pmodhygro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HYGRO_TimerInit &rArr; XTmrCtr_Initialize &rArr; XTmrCtr_InitHw &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_SetResetValue
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Initialize
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_InitHw
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_CfgInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_begin
</UL>

<P><STRONG><a name="[70]"></a>HYGRO_begin</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, pmodhygro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HYGRO_begin &rArr; HYGRO_WriteIIC &rArr; XIic_Send &rArr; SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_TimerInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_IICInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_WriteIIC
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_DelayMillis
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>HYGRO_ReadIIC</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, pmodhygro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HYGRO_ReadIIC &rArr; XIic_Send &rArr; SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Stop
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Recv
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_DelayMillis
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getTemperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getHumidity
</UL>

<P><STRONG><a name="[73]"></a>HYGRO_getTemperature</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, pmodhygro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HYGRO_getTemperature &rArr; HYGRO_ReadIIC &rArr; XIic_Send &rArr; SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_ReadIIC
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>HYGRO_getHumidity</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, pmodhygro.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HYGRO_getHumidity &rArr; HYGRO_ReadIIC &rArr; XIic_Send &rArr; SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_ReadIIC
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>HYGRO_tempF2C</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pmodhygro.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[c8]"></a>HYGRO_tempC2F</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pmodhygro.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[c9]"></a>XIic_Reset</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, xiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XIic_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_CfgInitialize
</UL>

<P><STRONG><a name="[b6]"></a>XIic_CfgInitialize</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, xiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XIic_CfgInitialize &rArr; XIic_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_ClearStats
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_IICInit
</UL>

<P><STRONG><a name="[b2]"></a>XIic_Start</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, xiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XIic_Start &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_ReadIIC
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_IICInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_WriteIIC
</UL>

<P><STRONG><a name="[b4]"></a>XIic_Stop</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, xiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XIic_Stop &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_ReadIIC
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_WriteIIC
</UL>

<P><STRONG><a name="[cb]"></a>XIic_SetAddress</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, xiic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[cc]"></a>XIic_GetAddress</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, xiic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[cd]"></a>XIic_SetGpOutput</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, xiic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[ce]"></a>XIic_GetGpOutput</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, xiic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[cf]"></a>XIic_IsSlave</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, xiic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[d0]"></a>XIic_SetRecvHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, xiic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[d1]"></a>XIic_SetSendHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, xiic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[d2]"></a>XIic_SetStatusHandler</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, xiic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[d4]"></a>XIic_CheckIsBusBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, xiic_l.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_WaitBusFree
</UL>

<P><STRONG><a name="[d3]"></a>XIic_WaitBusFree</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, xiic_l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = XIic_WaitBusFree
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_CheckIsBusBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_DynSend
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_DynRecv
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Send
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Recv
</UL>

<P><STRONG><a name="[bd]"></a>XIic_Recv</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, xiic_l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = XIic_Recv &rArr; RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_WaitBusFree
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_ReadIIC
</UL>

<P><STRONG><a name="[b3]"></a>XIic_Send</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, xiic_l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = XIic_Send &rArr; SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_WaitBusFree
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_ReadIIC
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_WriteIIC
</UL>

<P><STRONG><a name="[d7]"></a>XIic_DynRecv</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, xiic_l.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_WaitBusFree
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynRecvData
</UL>

<P><STRONG><a name="[d9]"></a>XIic_DynSend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, xiic_l.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_WaitBusFree
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DynSendData
</UL>

<P><STRONG><a name="[18b]"></a>XIic_DynInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, xiic_l.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>XIic_GetStats</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, xiic_stats.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[ca]"></a>XIic_ClearStats</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, xiic_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XIic_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_CfgInitialize
</UL>

<P><STRONG><a name="[b8]"></a>XTmrCtr_CfgInitialize</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xtmrctr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XTmrCtr_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Initialize
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_TimerInit
</UL>

<P><STRONG><a name="[b9]"></a>XTmrCtr_InitHw</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, xtmrctr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XTmrCtr_InitHw &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Initialize
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_TimerInit
</UL>

<P><STRONG><a name="[ba]"></a>XTmrCtr_Initialize</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, xtmrctr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = XTmrCtr_Initialize &rArr; XTmrCtr_InitHw &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_LookupConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_InitHw
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_CfgInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_TimerInit
</UL>

<P><STRONG><a name="[ae]"></a>XTmrCtr_Start</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, xtmrctr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XTmrCtr_Start &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_DelayMillis
</UL>

<P><STRONG><a name="[b0]"></a>XTmrCtr_Stop</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, xtmrctr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XTmrCtr_Stop &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_PwmDisable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_PwmConfigure
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_DelayMillis
</UL>

<P><STRONG><a name="[af]"></a>XTmrCtr_GetValue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xtmrctr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XTmrCtr_GetValue &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_DelayMillis
</UL>

<P><STRONG><a name="[bb]"></a>XTmrCtr_SetResetValue</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, xtmrctr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XTmrCtr_SetResetValue &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_TimerInit
</UL>

<P><STRONG><a name="[dd]"></a>XTmrCtr_GetCaptureValue</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xtmrctr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[ad]"></a>XTmrCtr_Reset</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, xtmrctr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XTmrCtr_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_PwmDisable
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_PwmEnable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_DelayMillis
</UL>

<P><STRONG><a name="[de]"></a>XTmrCtr_IsExpired</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, xtmrctr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[df]"></a>XTmrCtr_PwmConfigure</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, xtmrctr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Stop
</UL>

<P><STRONG><a name="[e4]"></a>XTmrCtr_PwmEnable</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, xtmrctr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Reset
</UL>

<P><STRONG><a name="[e5]"></a>XTmrCtr_PwmDisable</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, xtmrctr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Stop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Reset
</UL>

<P><STRONG><a name="[dc]"></a>XTmrCtr_LookupConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, xtmrctr_sinit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_Initialize
</UL>

<P><STRONG><a name="[e6]"></a>NAV_WriteSPI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NAV_WriteSPI &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_FIFOEnable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetIntThresholdALT
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConfigIntALT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetIntThresholdM
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConfigIntMAG
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConfigInt
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetIntThresholdG
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConfigIntG
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetIntThresholdXL
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConfigIntXL
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_InitAG
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_InitMAG
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_InitALT
</UL>

<P><STRONG><a name="[e7]"></a>NAV_InitALT</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NAV_InitALT &rArr; NAV_WriteSPI &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_DevTerm
</UL>

<P><STRONG><a name="[e8]"></a>NAV_InitMAG</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NAV_InitMAG &rArr; NAV_WriteSPI &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_DevTerm
</UL>

<P><STRONG><a name="[e9]"></a>NAV_InitAG</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NAV_InitAG &rArr; NAV_WriteSPI &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_DevTerm
</UL>

<P><STRONG><a name="[ea]"></a>NAV_DevTerm</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_InitAG
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_InitMAG
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_InitALT
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_end
</UL>

<P><STRONG><a name="[ee]"></a>NAV_GetMAGRangeLSB</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pmodnav.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_begin
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetRangeMAG
</UL>

<P><STRONG><a name="[ed]"></a>NAV_GetGRangeLSB</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pmodnav.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_begin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetRangeG
</UL>

<P><STRONG><a name="[ec]"></a>NAV_GetXLRangeLSB</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pmodnav.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_begin
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetRangeXL
</UL>

<P><STRONG><a name="[eb]"></a>NAV_SPIInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NAV_SPIInit &rArr; XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetOptions
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_CfgInitialize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_begin
</UL>

<P><STRONG><a name="[71]"></a>NAV_begin</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NAV_begin &rArr; NAV_SPIInit &rArr; XSpi_CfgInitialize &rArr; XSpi_Reset &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SPIInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetXLRangeLSB
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetGRangeLSB
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetMAGRangeLSB
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>NAV_end</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_DevTerm
</UL>

<P><STRONG><a name="[72]"></a>NAV_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NAV_Init &rArr; NAV_InitAG &rArr; NAV_WriteSPI &rArr; XSpi_Transfer &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_InitAG
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_InitMAG
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_InitALT
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>NAV_ReadRegister</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_FIFOEnable
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_DataAvailableALT
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_TempAvailableALT
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_DataAvailableMAG
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_DataAvailableG
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_DataAvailableXL
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetRegisterBits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetBitsInRegister
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetBitsInRegister
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetDeviceID
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadAccel
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadGyro
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadMag
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadPressure
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadTempC
</UL>

<P><STRONG><a name="[f3]"></a>NAV_ReadTempC</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NAV_ReadTempC &rArr; NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetData
</UL>

<P><STRONG><a name="[f5]"></a>NAV_ReadPressure</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = NAV_ReadPressure &rArr; NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadPressurehPa
</UL>

<P><STRONG><a name="[f6]"></a>NAV_ReadPressurehPa</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = NAV_ReadPressurehPa &rArr; NAV_ReadPressure &rArr; NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadPressure
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetData
</UL>

<P><STRONG><a name="[f8]"></a>NAV_ConvertReadingToValueGauss</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NAV_ConvertReadingToValueGauss &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadMagGauss
</UL>

<P><STRONG><a name="[fa]"></a>NAV_ReadMag</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NAV_ReadMag &rArr; NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadMagGauss
</UL>

<P><STRONG><a name="[fb]"></a>NAV_ReadMagGauss</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = NAV_ReadMagGauss &rArr; NAV_ReadMag &rArr; NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadMag
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConvertReadingToValueGauss
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetData
</UL>

<P><STRONG><a name="[fc]"></a>NAV_ConvertReadingToValueDPS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NAV_ConvertReadingToValueDPS &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadGyroDps
</UL>

<P><STRONG><a name="[fd]"></a>NAV_ReadGyro</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = NAV_ReadGyro &rArr; NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadGyroDps
</UL>

<P><STRONG><a name="[fe]"></a>NAV_ReadGyroDps</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = NAV_ReadGyroDps &rArr; NAV_ReadGyro &rArr; NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadGyro
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConvertReadingToValueDPS
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetData
</UL>

<P><STRONG><a name="[ff]"></a>NAV_ConvertReadingToValueG</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NAV_ConvertReadingToValueG &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadAccelG
</UL>

<P><STRONG><a name="[100]"></a>NAV_ReadAccel</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = NAV_ReadAccel &rArr; NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadAccelG
</UL>

<P><STRONG><a name="[101]"></a>NAV_ReadAccelG</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = NAV_ReadAccelG &rArr; NAV_ReadAccel &rArr; NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadAccel
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConvertReadingToValueG
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetData
</UL>

<P><STRONG><a name="[76]"></a>NAV_GetData</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, pmodnav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = NAV_GetData &rArr; NAV_ReadAccelG &rArr; NAV_ReadAccel &rArr; NAV_ReadRegister &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadAccelG
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadGyroDps
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadMagGauss
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadPressurehPa
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadTempC
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>NAV_GetDeviceID</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>

<P><STRONG><a name="[103]"></a>NAV_ReadSPI</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetFIFOStatus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetIntSrcALT
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetIntSrcMAG
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConfigInt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetIntSrcXLG
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConfigIntXL
</UL>

<P><STRONG><a name="[104]"></a>NAV_WriteRegister</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_Transfer
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XSpi_SetSlaveSelect
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetRegisterBits
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetBitsInRegister
</UL>

<P><STRONG><a name="[105]"></a>NAV_SetBitsInRegister</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteRegister
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetFIFO
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetODR
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetRangeMAG
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetRangeG
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetRangeXL
</UL>

<P><STRONG><a name="[106]"></a>NAV_GetBitsInRegister</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetFIFOThs
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetFIFOMode
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetODRRaw
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetRangeMAG
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetRangeG
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetRangeXL
</UL>

<P><STRONG><a name="[107]"></a>NAV_SetRegisterBits</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteRegister
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConfigIntALT
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConfigInt
</UL>

<P><STRONG><a name="[108]"></a>NAV_SetRangeXL</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetBitsInRegister
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetXLRangeLSB
</UL>

<P><STRONG><a name="[109]"></a>NAV_GetRangeXL</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetBitsInRegister
</UL>

<P><STRONG><a name="[10a]"></a>NAV_DataAvailableXL</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>

<P><STRONG><a name="[10b]"></a>NAV_ConfigIntXL</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadSPI
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>

<P><STRONG><a name="[10c]"></a>NAV_GetIntSrcXLG</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadSPI
</UL>

<P><STRONG><a name="[10d]"></a>NAV_SetIntThresholdXL</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>

<P><STRONG><a name="[10e]"></a>NAV_SetRangeG</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetBitsInRegister
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetGRangeLSB
</UL>

<P><STRONG><a name="[10f]"></a>NAV_GetRangeG</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetBitsInRegister
</UL>

<P><STRONG><a name="[110]"></a>NAV_DataAvailableG</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>

<P><STRONG><a name="[111]"></a>NAV_ConfigIntG</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>

<P><STRONG><a name="[112]"></a>NAV_SetIntThresholdG</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>

<P><STRONG><a name="[113]"></a>NAV_ConfigInt</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetRegisterBits
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadSPI
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>

<P><STRONG><a name="[114]"></a>NAV_SetRangeMAG</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetBitsInRegister
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetMAGRangeLSB
</UL>

<P><STRONG><a name="[115]"></a>NAV_GetRangeMAG</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetBitsInRegister
</UL>

<P><STRONG><a name="[116]"></a>NAV_DataAvailableMAG</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>

<P><STRONG><a name="[117]"></a>NAV_ConfigIntMAG</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>

<P><STRONG><a name="[118]"></a>NAV_SetIntThresholdM</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>

<P><STRONG><a name="[119]"></a>NAV_GetIntSrcMAG</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadSPI
</UL>

<P><STRONG><a name="[11a]"></a>NAV_TempAvailableALT</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>

<P><STRONG><a name="[11b]"></a>NAV_DataAvailableALT</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>

<P><STRONG><a name="[11c]"></a>NAV_ConfigIntALT</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetRegisterBits
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>

<P><STRONG><a name="[11d]"></a>NAV_SetIntThresholdALT</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>

<P><STRONG><a name="[11e]"></a>NAV_GetIntSrcALT</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadSPI
</UL>

<P><STRONG><a name="[11f]"></a>NAV_SetODR</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetBitsInRegister
</UL>

<P><STRONG><a name="[120]"></a>NAV_GetODRRaw</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetBitsInRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetODR
</UL>

<P><STRONG><a name="[121]"></a>NAV_GetODR</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetODRRaw
</UL>

<P><STRONG><a name="[123]"></a>NAV_FIFOEnable</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteSPI
</UL>

<P><STRONG><a name="[124]"></a>NAV_SetFIFO</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetBitsInRegister
</UL>

<P><STRONG><a name="[125]"></a>NAV_GetFIFOMode</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetBitsInRegister
</UL>

<P><STRONG><a name="[126]"></a>NAV_GetFIFOThs</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetBitsInRegister
</UL>

<P><STRONG><a name="[127]"></a>NAV_GetFIFOStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pmodnav.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadSPI
</UL>

<P><STRONG><a name="[f1]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteRegister
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
</UL>

<P><STRONG><a name="[f2]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_WriteRegister
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadRegister
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[6b]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSPIData
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>__printf</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[12d]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[4b]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[4d]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[18c]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_PwmConfigure
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_DelayMillis
</UL>

<P><STRONG><a name="[18e]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[18f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getTemperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getHumidity
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadTempC
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_tempC2F
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_tempF2C
</UL>

<P><STRONG><a name="[190]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getTemperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getHumidity
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadTempC
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_tempC2F
</UL>

<P><STRONG><a name="[134]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getTemperature
</UL>

<P><STRONG><a name="[137]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_tempF2C
</UL>

<P><STRONG><a name="[13a]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[139]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadTempC
</UL>

<P><STRONG><a name="[192]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getTemperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getHumidity
</UL>

<P><STRONG><a name="[193]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getTemperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getHumidity
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadTempC
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_tempC2F
</UL>

<P><STRONG><a name="[194]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getTemperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getHumidity
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getTemperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getHumidity
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_tempC2F
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_tempF2C
</UL>

<P><STRONG><a name="[195]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetIntThresholdM
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetIntThresholdG
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetIntThresholdXL
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_PwmConfigure
</UL>

<P><STRONG><a name="[13d]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[13c]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetIntThresholdALT
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetIntThresholdM
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetIntThresholdG
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetIntThresholdXL
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_PwmConfigure
</UL>

<P><STRONG><a name="[196]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConvertReadingToValueG
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConvertReadingToValueDPS
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConvertReadingToValueGauss
</UL>

<P><STRONG><a name="[197]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetRangeG
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ReadPressurehPa
</UL>

<P><STRONG><a name="[198]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>__aeabi_l2f_normalise</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ffltl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
</UL>

<P><STRONG><a name="[13f]"></a>__aeabi_l2f</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ffltl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f_normalise
</UL>

<P><STRONG><a name="[199]"></a>_ll_sto_f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltl.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_ul2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_PwmConfigure
</UL>

<P><STRONG><a name="[19a]"></a>_ll_uto_f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltl.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__ARM_scalbnf</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getTemperature
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_getHumidity
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_SetIntThresholdALT
</UL>

<P><STRONG><a name="[128]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[53]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[19b]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[142]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[51]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[144]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[19d]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[12a]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[3e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[14d]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[14f]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[4f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[132]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[19e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[19f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[14a]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[14c]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[146]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[147]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[149]"></a>_btod_emul</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[153]"></a>_btod_emuld</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[148]"></a>_btod_ediv</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[155]"></a>_btod_edivd</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[143]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[15d]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1a0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5c]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[157]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[156]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[60]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[15b]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[15c]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1a3]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[122]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pmodnav.o(i.__ARM_common_switch8), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_GetODR
</UL>

<P><STRONG><a name="[14b]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[55]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)

<P><STRONG><a name="[15e]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConvertReadingToValueG
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConvertReadingToValueDPS
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NAV_ConvertReadingToValueGauss
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XTmrCtr_PwmConfigure
</UL>

<P><STRONG><a name="[1a6]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYGRO_tempF2C
</UL>

<P><STRONG><a name="[160]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[49]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[86]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_QSPI_XIP_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_SPI0_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAP_QSPI0_Handler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI0_Handler
</UL>

<P><STRONG><a name="[39]"></a>StubStatusHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, xspi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StubStatusHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xspi.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>StubHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StubHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xuartlite.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>SendDataHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendDataHandler &rArr; XUartLite_SendBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
</UL>

<P><STRONG><a name="[a6]"></a>ReceiveDataHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReceiveDataHandler &rArr; XUartLite_ReceiveBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
</UL>

<P><STRONG><a name="[3c]"></a>XIic_StubStatusHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, xiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XIic_StubStatusHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xiic.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>XIic_StubHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XIic_StubHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xiic.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>RecvData</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, xiic_l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Recv
</UL>

<P><STRONG><a name="[d6]"></a>SendData</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, xiic_l.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_Send
</UL>

<P><STRONG><a name="[d8]"></a>DynRecvData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xiic_l.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_DynRecv
</UL>

<P><STRONG><a name="[da]"></a>DynSendData</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, xiic_l.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XIic_DynSend
</UL>

<P><STRONG><a name="[3d]"></a>XTmrCtr_StubCallback</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, xtmrctr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XTmrCtr_StubCallback &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xtmrctr.o(.text)
</UL>
<P><STRONG><a name="[136]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[135]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[161]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[15f]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[145]"></a>_fp_digits</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[151]"></a>btod_internal_mul</STRONG> (Thumb, 492 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[154]"></a>btod_internal_div</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[159]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[14e]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[12f]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[12e]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[130]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[131]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
